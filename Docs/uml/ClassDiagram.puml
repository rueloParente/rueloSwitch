@startuml
!pragma layout smetana

class House {
-location: Location
-rooms: List<Room>
-users: List<User>
+House (location: Location): void
+addRoom (room: Room) : void
+getRooms (): List<Room>
}

class Location {
-address: String
-zipCode: String
-gpsLocation: String
+Location (address: String, zipCode: String, gpsLocation: String): void
+setAddress (address: String): void
+setZipCode (zipCode: String) : void
+setGpsLocation (gpsLocation: String): void
}
' Room is a class that represents a room/divistion of the house, we will be considering
' that a room can be a bedroom, a kitchen but also a garden or a garage
class Room {
-name: String
-floor: Integer
-dimension: RoomDimension
-devices: List<Device>
-owners: List<User>
+Room (name: String, floor: Integer, dimension: RoomDimension): void
+setName (name: String): void
+setFloor (floor: Integer): void
+addDevice (device: Device): void
+getLocation (): Location
+getDimension (): RoomDimension
}

class RoomDimension {
-length: double
-width: double
-height: double
+RoomDimension (length: double, width: double, height: double): void
+setLength (length: double): void
+getLength (): double
+setWidth (width: double): void
+getWidth (): double
+setHeight (height: double): void
+getHeight (): double
}

' We can get the device type by a method checking
' the type of the sensors and actuators
class Device {
-name: String
-location: Room
-deviceType: DeviceType
-sensors: List<Sensor>
-actuators: List<Actuator>
+Device (name: String, location: Room, deviceType: DeviceType,
 sensors: List<Sensor>, actuators: List<Actuator>): void
}

class Sensor {
-name: String
-sensorType: SensorType
-state: boolean
+Sensor (name: String, sensorType: SensorType, state: boolean): void
}

class Actuator {
-name: String
-actuatorType: ActuatorType
-state: boolean
+Actuator (name: String, actuatorType: ActuatorType, state: boolean): void

}

class DeviceType {
-name: String
-description: String
+Type (name: String, description: String): void

}

class SensorType {
-name: String
-units: String
-digital: boolean
+Type (name: String, units: String, digital: boolean): void
}

class ActuatorType {
-name: String
-motion: String
-power: String
+Type (name: String, motion: String, power: String): void
}

class User {
-username: String
-roles: List<Role>
}

class Role {
-name: String
}

House "1" -- "1" Location : has
Room "1" -- "1" RoomDimension : has
House "1" -- "0..*" Room : contains
Room "1"-- "0..*" Device : contains
Device "1" --"1..*" Sensor : has a
Device "1" --"0..*" Actuator : has a
House "1" -- "1..*" User : has
Room "1" -- "0..*" User : has
User "1"-- "1..*" Role : has

Sensor "1" -- "1" SensorType : has
Actuator "1" -- "1" ActuatorType : has
Device "1" -- "1" DeviceType : has

class Supported {
+type: List<SensorType>
+type: List<ActuatorType>
+type: List<DeviceType>
+addSensorType (sensorType: SensorType): void
+addActuatorType (actuatorType: ActuatorType): void
+addDeviceType (deviceType: DeviceType): void
}

@enduml